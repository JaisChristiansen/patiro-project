/* import custom variables and overrides */
@import './bootstrap-variables.scss';

/* utility import */
@import '../../../node_modules/bootstrap/scss/_functions.scss';
@import '../../../node_modules/bootstrap/scss/_variables.scss';
@import "../../../node_modules/bootstrap/scss/_mixins.scss";

$form-check-input-checked-bg-image:       url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'><path fill='none' stroke='#{$form-check-input-checked-color}' stroke-linecap='square' stroke-linejoin='round' stroke-width='2' d='M2 11 l5 6 l11 -13'/></svg>");

$custom-theme-colors: (
  "cta": $cta,
  "black": $black,
  "white": $white,
  "gray": $gray-500,
);

$theme-colors: map-merge($custom-theme-colors, $theme-colors);

$custom-table-variants: (
    "cta": $cta,
    "black": $black,
    "white": $white,
);

$table-variants: map-merge($custom-table-variants, $table-variants);

/* import bootstrap */
@import '../../../node_modules/bootstrap/scss/bootstrap.scss';


/* button overrides */
@each $theme, $value in $theme-colors {

  .hoverable-#{$theme} {
    background-color: $value;
  
    &:hover,
    &.hover {
      background-color: if(color-contrast($value)==$color-contrast-light,
          tint-color($value, 10%),
          shade-color($value, 10%));
    }
  };
  
  .btn-#{$theme} {

    .btn-check:focus + &,
    &:focus,
    &.focus {
      &:not(:hover) {
        &:not(:active) {
          color: color-contrast($value);
          background-color: $value;
          border-color: $value;
        }
      }
    }

    @include button-variant($value, $value,
    // modify
      $disabled-color: if($value ==$white, $black, $white),
      $disabled-background: tint-color($value, $btn-disabled-border-tint-amount),
      $disabled-border: tint-color($value, $btn-disabled-border-tint-amount),
    );
  };

  .btn-outline-#{$theme} {
    background-color: $white;
    &:hover {
      background-color: $value;
      border-color: $value;
    }

    .btn-check:checked + &,
    .btn-check:active + &,
    &:active,
    &.active,
    &.dropdown-toggle.show {
      color: color-contrast($value);
      &:not(.boolean-selector) {
        background-color: if(
          color-contrast($value) == $color-contrast-light,
          shade-color($value, $btn-active-bg-shade-amount),
          tint-color($value, $btn-active-border-tint-amount)
        );
        border-color: if(
          color-contrast($value) == $color-contrast-light,
          shade-color($value, $btn-active-bg-shade-amount),
          tint-color($value, $btn-active-border-tint-amount)
        );
      }
    }

    .btn-group>&>.btn-check:checked {
      color: $theme;
      background-color: $white;
      border-color: $theme;
    }

    &:disabled,
    &.disabled {
      color: $gray-600;
      border-color: $gray-600;
    };
  };

  .btn-group .btn.btn-outline-#{$theme}.selector-input {

    &:hover,
    &.hover {
      &:not(:focus) {
        background-color: if(
          color-contrast($value)==$color-contrast-light,
          shade-color($value, $btn-hover-bg-shade-amount),
          tint-color($value, $btn-hover-bg-tint-amount)
        );
        border-color: if(
          color-contrast($value)==$color-contrast-light,
          shade-color($value, $btn-hover-border-shade-amount),
          tint-color($value, $btn-hover-border-tint-amount)
        );
      }
    }

    &.is-checked {
      color: $white;
      background-color: $value;
      border-color: $value;
    }
  };

};

/* CTA-button, special case rules */
.btn-cta {
  .btn-check:focus + &,
    &:focus,
    &.focus {
      &:not(:hover) {
        &:not(:active) {
          color: $white;
          background-color: $cta;
          border-color: $cta;
        }
      }
    }
  @include button-variant($cta, $cta,
    $color: $white,
    $hover-color: $white,
    $active-color: $white,
    $disabled-color: $white,
    $disabled-background: tint-color($cta, $btn-disabled-border-tint-amount),
    $disabled-border: tint-color($cta, $btn-disabled-border-tint-amount),
  )
};

.btn-outline-cta {
  @include button-outline-variant($cta,
    $color-hover: $white,
    $active-color: $white,
  );
  &:hover {
    background-color: $cta;
    border-color: $cta;
  }


  .btn-check:checked + &,
  .btn-check:active + &,
  &:active,
  &.active,
  &.dropdown-toggle.show {
    color: $white;
    background-color: shade-color($cta, $btn-active-bg-shade-amount);
    border-color: shade-color($cta, $btn-active-bg-shade-amount);
  };

  &:disabled,
  &.disabled {
    color: $gray-600;
    border-color: $gray-600;
  };
};

.form-check-input {
  
  &.hover,
  &:hover {
    &:not(:disabled) {
      @if $enable-shadows {
        @include box-shadow($input-box-shadow, $input-focus-box-shadow);
      } @else {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: $input-focus-box-shadow;
      }
    }
  }

  &.disabled,
  &:disabled {
    border: 1px solid rgba($black, .25);
  }
}

.form-control {
  background-clip: border-box;
}


.navbar-expand {
  @each $breakpoint in map-keys($grid-breakpoints) {
    $next: breakpoint-next($breakpoint, $grid-breakpoints);
    $infix: breakpoint-infix($next, $grid-breakpoints);

    // stylelint-disable-next-line scss/selector-no-union-class-name
    &#{$infix} {
      @include media-breakpoint-up($next) {
        .navbar-toggler {
          display: none !important;
        }
      }
    }
  }
}

.navbar-nav {
  .nav-link.active {
    border-color: $primary;
  }
}


/* additional roundings */

.rounded-4 {
  border-radius: $border-radius-xl !important;
}

.rounded-5 {
  border-radius: $border-radius-xxl !important;
}

.rounded-1-start {
  border-top-left-radius: $border-radius-sm !important;
  border-bottom-left-radius: $border-radius-sm !important;
}

.rounded-2-start {
  border-top-left-radius: $border-radius !important;
  border-bottom-left-radius: $border-radius !important;
}

.rounded-3-start {
  border-top-left-radius: $border-radius-lg !important;
  border-bottom-left-radius: $border-radius-lg !important;
}

.rounded-4-start {
  border-top-left-radius: $border-radius-xl !important;
  border-bottom-left-radius: $border-radius-xl !important;
}

.rounded-5-start {
  border-top-left-radius: $border-radius-xxl !important;
  border-bottom-left-radius: $border-radius-xxl !important;
}

.rounded-1-end {
  border-top-right-radius: $border-radius-sm !important;
  border-bottom-right-radius: $border-radius-sm !important;
}

.rounded-2-end {
  border-top-right-radius: $border-radius !important;
  border-bottom-right-radius: $border-radius !important;
}

.rounded-3-end {
  border-top-right-radius: $border-radius-lg !important;
  border-bottom-right-radius: $border-radius-lg !important;
}

.rounded-4-end {
  border-top-right-radius: $border-radius-xl !important;
  border-bottom-right-radius: $border-radius-xl !important;
}

.rounded-5-end {
  border-top-right-radius: $border-radius-xxl !important;
  border-bottom-right-radius: $border-radius-xxl !important;
}


.rounded-1-top {
  border-top-left-radius: $border-radius-sm !important;
  border-top-right-radius: $border-radius-sm !important;
}

.rounded-2-top {
  border-top-left-radius: $border-radius !important;
  border-top-right-radius: $border-radius !important;
}

.rounded-3-top {
  border-top-left-radius: $border-radius-lg !important;
  border-top-right-radius: $border-radius-lg !important;
}

.rounded-4-top {
  border-top-left-radius: $border-radius-xl !important;
  border-top-right-radius: $border-radius-xl !important;
}

.rounded-5-top {
  border-top-left-radius: $border-radius-xxl !important;
  border-top-right-radius: $border-radius-xxl !important;
}

.rounded-1-bottom {
  border-bottom-left-radius: $border-radius-sm !important;
  border-bottom-right-radius: $border-radius-sm !important;
}

.rounded-2-bottom {
  border-bottom-left-radius: $border-radius !important;
  border-bottom-right-radius: $border-radius !important;
}

.rounded-3-bottom {
  border-bottom-left-radius: $border-radius-lg !important;
  border-bottom-right-radius: $border-radius-lg !important;
}

.rounded-4-bottom {
  border-bottom-left-radius: $border-radius-xl !important;
  border-bottom-right-radius: $border-radius-xl !important;
}

.rounded-5-bottom {
  border-bottom-left-radius: $border-radius-xxl !important;
  border-bottom-right-radius: $border-radius-xxl !important;
}

.vue-tel-input {
  background-color: $input-bg;
  &:focus-within {
    box-shadow: none;
  }
}

.vti__dropdown {
  &:hover {
    background-color: transparent !important;
  }
}